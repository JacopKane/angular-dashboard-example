!function(e,t){if("function"==typeof define&&define.amd)define(["exports"],t);else if("undefined"!=typeof exports)t(exports);else{var n={exports:{}};t(n.exports),e.dashboard=n.exports}}(this,function(e){!function(t,n){if("function"==typeof define&&define.amd)define([],n);else if("undefined"!=typeof e)n();else{var r={exports:{}};n(),t.dashboard=r.exports}}(this,function(){"use strict";angular.module("dashboard",["chart.js"]).controller("SliderController",["$scope","$element","$injector",function(e,t,n){t=angular.element(t)[0];var r=this,a=n.get("$log"),o=n.get("$timeout"),u=n.get("$document"),i=angular.element(u.find("body")),s=angular.element(t.querySelector(".bar"))[0],c=angular.element(t.querySelector(".dragger"))[0],m=0,d=s.getBoundingClientRect().width,f=function(){e.amount=Math.round(r.currentX/d*(e.max-e.min)+e.min),o(function(){return e.$digest()})},g=function(){var e=c.getBoundingClientRect().width,t=c.offsetLeft;return t+=e/2};e.amount=Math.round((e.max-e.min)/2),o(function(){f()}),Object.assign(r,{dragging:!1,currentX:g(),mouseDown:function(e){e.preventDefault(),a.debug("mouseDown",e),r.dragging=!0}}),i.on("mousemove",function(e){if(r.dragging===!0){e.preventDefault();var t=g(e)+e.movementX;t<=d&&t>=m&&(a.debug("dragging",t),r.currentX=t,f())}}),i.on("mouseup",function(e){r.dragging===!0&&(e.preventDefault(),a.debug("mouseUp"),r.dragging=!1)})}]).directive("slider",function(){return{scope:{measure:"@measure",amount:"=amount",title:"@title",min:"=min",max:"=max"},restrict:"E",replace:!0,templateUrl:"./template/slider.html",controllerAs:"vm",controller:"SliderController"}}).factory("WeatherApiFactory",["$injector",function(e){var t=e.get("$log"),n=e.get("$http"),r={get:function(){return new Promise(function(e,r){return t.debug("requesting data from weather api"),n({method:"GET",url:"//private-4945e-weather34.apiary-proxy.com/weather34/rain"}).then(function(t){return t.status?200!==t.status?r(t):e(t):r(t)},r)})}};return r}]).controller("DashboardController",["$scope","$injector",function(e,t){var n=this,r=t.get("$log"),a=t.get("$timeout"),o=t.get("WeatherApiFactory"),u=function(e,t,n){r.debug("chanceOfRain started",{pressure:e,temperature:t,amount:n});var a=Math.log(n+1)*Math.log(e-929)*Math.log(t-9),o=Math.min(Math.max(a,0),100),u=Math.min(1.5*o,100),i=Math.max(.5*o,0);return[i,o,u]},i=function(){return 0===n.days.length?n.chanceOfRain:0===n.pressureAmount?n.chanceOfRain:0===n.temperatureAmount?n.chanceOfRain:(n.days.map(function(e,t){u(n.pressureAmount,n.temperatureAmount,e).map(function(e,r){n.chanceOfRain[r]=n.chanceOfRain[r]||[],n.chanceOfRain[r][t]=e})}),r.debug("chanceOfRain",n.chanceOfRain),a(function(){return e.$digest()}),n.chanceOfRain)},s=function(e){n.days=e.data[0].days.map(function(e){return n.labels.push(e.day),e.amount}),i(),r.debug("days",n.days)},c=function(e){r.error(e),n.error=n.str.apiError};Object.assign(e,{pressureAmount:0,temperatureAmount:0}),Object.assign(n,{str:{title:"Weather Dasboard",apiError:"Could not fetch the weather data",sliderPressure:"Pressure",sliderTemperature:"Temperature"},error:"",labels:[],days:[],chanceOfRain:[],onPressureChange:function(e){r.debug("onPressureChange",e),n.pressureAmount=e,i()},onTemperatureChange:function(e){r.debug("onTemperatureChange",e),n.temperatureAmount=e,i()},initialize:function(){e.$watch(n.days,function(e){return i()}),e.$watch("temperatureAmount",n.onTemperatureChange),e.$watch("pressureAmount",n.onPressureChange),o.get().then(s)["catch"](c)}})}])})});
//# sourceMappingURL=data:application/json;base64,
